using System;
using System.Collections.Generic;
using System.Reflection;
using YTS.Engine.ShineUpon;
using YTS.Tools;
using YTS.Tools.Model;

namespace YTS.Engine.DataBase
{
    /// <summary>
    /// 映射结果信息-数据表列
    /// </summary>
    /// <typeparam name="M">数据表映射模型</typeparam>
    public class ColumnModelParser<M> : ShineUponParser<M, ColumnInfo>
        where M : AbsShineUpon
    {
        public ColumnModelParser() : base() { }

        #region === Info ===
        public override ColumnInfo AnalyticalItem(ColumnInfo info) {
            info.Attribute = ReflexHelp.AttributeFindOnly<ColumnAttribute>(info.Property);
            return CheckData.IsObjectNull(info.Attribute) ? null : info;
        }

        /// <summary>
        /// 获得列信息 可写
        /// </summary>
        public ColumnInfo[] GetColumn_CanWrite() {
            return ConvertTool.ListConvertType(this.GetSortResult(), colinfo => {
                if (colinfo.Attribute.IsAutoGenerated) {
                    return null;
                }
                return colinfo;
            }, null);
        }
        #endregion

        #region === Sort ===
        /// <summary>
        /// 钩子: 判断是否需要排序
        /// </summary>
        /// <returns>是否需要布尔值</returns>
        public override bool IsNeedSort() {
            return true;
        }

        /// <summary>
        /// 执行排序比较方法
        /// </summary>
        /// <param name="array">需要排序的信息模型列表</param>
        /// <returns>排序完成信息模型列表</returns>
        public override List<ColumnInfo> SortComparison(List<ColumnInfo> list) {
            if (CheckData.IsSizeEmpty(list)) {
                return new List<ColumnInfo>();
            }
            list.Sort(SortMethod);
            return list;
        }

        /// <summary>
        /// 排序比较 实现委托: Comparison泛型
        /// </summary>
        public static int SortMethod(ColumnInfo x, ColumnInfo y) {
            // 主键
            if (x.Attribute.IsPrimaryKey != y.Attribute.IsPrimaryKey) {
                return y.Attribute.IsPrimaryKey ? 1 : -1;
            }
            // 标识列
            if (x.Attribute.IsIDentity != y.Attribute.IsIDentity) {
                return y.Attribute.IsIDentity ? 1 : -1;
            }
            // 自动生成的值
            if (x.Attribute.IsAutoGenerated != y.Attribute.IsAutoGenerated) {
                return y.Attribute.IsAutoGenerated ? 1 : -1;
            }
            // 允许为空的值
            if (x.Attribute.IsCanBeNull != y.Attribute.IsCanBeNull) {
                return y.Attribute.IsCanBeNull ? 1 : -1;
            }
            // 排序序列
            int indexResult = Sort.Int(x.Attribute.SortIndex, y.Attribute.SortIndex);
            return indexResult == 0 ? Sort.String(x.Property.Name, y.Property.Name) : indexResult;
        }
        #endregion
    }
}
