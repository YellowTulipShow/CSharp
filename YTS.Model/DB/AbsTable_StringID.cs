using System;
using System.Collections.Generic;
using YTS.Engine.DataBase;
using YTS.Tools;
using YTS.Tools.Const;

namespace YTS.Model.DB
{
    /// <summary>
    /// 表-基础-模型 记录ID
    /// </summary>
    [Serializable]
    public abstract class AbsTable_StringID : AbsTable_TimeAdd
    {
        /// <summary>
        /// 错误默认的 SID 值
        /// </summary>
        public const string ERROR_DEFAULT_SID_VALUE = @"xxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx";

        /// <summary>
        /// 唯一ID标识String类型
        /// </summary>
        [Explain(@"唯一ID标识String类型")]
        [Column(IsPrimaryKey = true, IsIDentity = false, IsAutoGenerated = false, SortIndex = ushort.MinValue, CharLength = 32)]
        public string SID { get { return _SID; } set { _SID = value; } }
        private string _SID = ERROR_DEFAULT_SID_VALUE;

        /// <summary>
        /// 创建一个新的字符串SID标识值
        /// </summary>
        /// <returns>字符串标识</returns>
        public string CreateNewSID() {
            List<char> char_list = new List<char>();
            char_list.AddRange(CommonData.ASCII_Number());
            char_list.AddRange(CommonData.ASCII_LowerEnglish());
            char[] chars = char_list.ToArray();
            string first_step = RandomData.GetString(chars, 27);
            // 创建几个计算方法, 随机选择一个与 first_step 计算得到新的记录

            EnumInfo enum_info = EnumInfo.AnalysisItem(GetUseCode());
            return string.Format("{0}-{1}", enum_info.IntValue.ToString(), first_step);
        }

        /// <summary>
        /// 获得用途代码
        /// </summary>
        public abstract Enums.UseCodeMark GetUseCode();
    }
}
