using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using CSharp.LibrayFunction;

namespace CSharp.LibrayDataBase
{
    /// <summary>
    /// XML 文件系统数据访问器
    /// </summary>
    /// <typeparam name="D"></typeparam>
    /// <typeparam name="M">数据访问模型</typeparam>
    public class BLLXML<D, M> : AbsBLL<D, M>
        where D : DALXML<M>
        where M : AbsModelNull
    {
        public BLLXML(D dal) : base(dal) { }

        /// <summary>
        /// 获得文件绝对路径
        /// </summary>
        public string GetFileAbsPath() {
            return base.SelfDAL.GetFileAbsPath();
        }
    }

    /// <summary>
    /// XML 文件系统数据访问器
    /// </summary>
    /// <typeparam name="M">数据访问模型</typeparam>
    public class DALXML<M> : AbsDAL<M> where M : AbsModelNull
    {
        public DALXML() : base() { }

        /// <summary>
        /// 获得文件夹绝对路径
        /// </summary>
        public string GetDirectoryAbsPath() {
            return PathHelper.ConvertToAbsolutePath("/DataXML");
        }

        /// <summary>
        /// 获得文件绝对路径
        /// </summary>
        /// <param name="directoryabspath">文件夹地址, 为空使用默认地址</param>
        /// <returns></returns>
        public string GetFileAbsPath(string directoryabspath = null) {
            if (CheckData.IsStringNull(directoryabspath)) {
                directoryabspath = GetDirectoryAbsPath();
            }
            FileHelper.CreateDirectory(directoryabspath);
            return string.Format("{0}\\{1}.xml", directoryabspath, GetTableName());
        }

        /// <summary>
        /// 默认根节点名称
        /// </summary>
        public virtual string GetRootNodeName() {
            return @"model.root";
        }

        public override void Supplementary() {
            string fileabspath = GetFileAbsPath();
            string rootName = GetRootNodeName();
            XmlDocument document = XmlHelper.GetDocument(fileabspath, rootName);
            XmlNode root = document.SelectSingleNode(rootName);
            document.Save(fileabspath);
        }

        #region ====== override:AbsDAL<M> ======
        public override bool Insert(M model) {
            try {
                string fileabspath = GetFileAbsPath();
                string rootNodeName = GetRootNodeName();
                string tablename = GetTableName();
                XmlDocument document = XmlHelper.GetDocument(fileabspath, rootNodeName);
                XmlNode root = CheckGetRootNode(document, rootNodeName);
                XmlNode autoGeneratedNode = CheckGetAutoGeneratedNode(document, rootNodeName);
                
                XmlElement modelnode = document.CreateElement(tablename);
                foreach (ColumnItemModel item in base.modelParser.ColumnInfoArray) {
                    KeyValueModel im = GetModelValue(model, autoGeneratedNode, item);
                    if (CheckData.IsObjectNull(im) || CheckData.IsStringNull(im.Key))
                        continue;
                    XmlElement columnnode = document.CreateElement(im.Key);
                    columnnode.InnerText = im.Value;
                    modelnode.AppendChild(columnnode);
                }
                root.AppendChild(modelnode);
                document.Save(fileabspath);
                return true;
            } catch (Exception) {
                return false;
            }
        }
        private XmlNode CheckGetRootNode(XmlDocument document, string rootNodeName) {
            XmlNode root = document.DocumentElement;
            if (CheckData.IsObjectNull(root) || root.Name != rootNodeName) {
                XmlNode newnode = document.CreateElement(rootNodeName);
                document.ReplaceChild(newnode, root);
                root = newnode;
            }
            return root;
        }
        private XmlNode CheckGetAutoGeneratedNode(XmlDocument document, string rootNodeName) {
            const string AUTO_GENERATEDNODE = @"AutoGeneratedNode";
            XmlNode root = CheckGetRootNode(document, rootNodeName);
            XmlNode autoGeneratedNode = root.SelectSingleNode(AUTO_GENERATEDNODE);
            if (CheckData.IsObjectNull(autoGeneratedNode)) {
                autoGeneratedNode = document.CreateElement(AUTO_GENERATEDNODE);
                autoGeneratedNode.InnerText = (0).ToString();
                root.AppendChild(autoGeneratedNode);
            }
            return autoGeneratedNode;
        }
        private KeyValueModel GetModelValue(M model, XmlNode autoGeneratedNode, ColumnItemModel item) {
            KeyValueModel im = base.modelParser.GetModelValue(item, model);
            if (item.Attribute.IsDbGenerated) {
                int auto_generated_val = ConvertTool.StrToInt(autoGeneratedNode.InnerText, 0);
                auto_generated_val += 1;
                im.Value = auto_generated_val.ToString();
                autoGeneratedNode.InnerText = im.Value;
            }
            return im;
        }

        public override bool Delete(WhereModel wheres) {
            return false;
        }

        public override bool Update(FieldValueModel[] fielvals, WhereModel wheres) {
            return false;
        }

        public override M[] Select(int top = 0, WhereModel wheres = null, FieldOrderModel[] fieldOrders = null) {
            string fileabspath = GetFileAbsPath();
            string rootNodeName = GetRootNodeName();
            string tablename = GetTableName();
            XmlDocument document = XmlHelper.GetDocument(fileabspath, rootNodeName);
            XmlNode root = document.DocumentElement;
            if (CheckData.IsObjectNull(root)) {
                return new M[] { };
            }

            List<M> model_list = new List<M>();

            foreach (XmlNode node in root.SelectNodes(tablename)) {
                M model = base.modelParser.CreateDefaultModel();
                foreach (ColumnItemModel column in base.modelParser.ColumnInfoArray) {
                    if (CheckData.IsObjectNull(column)) {
                        continue;
                    }
                    XmlNode sonnode = node.SelectSingleNode(column.Property.Name);
                    if (CheckData.IsObjectNull(sonnode)) {
                        continue;
                    }
                    object value = sonnode.InnerText.Trim();
                    model = base.modelParser.SetModelValue(column, model, value);
                }
                model_list.Add(model);
                if (model_list.Count >= top) {
                    break;
                }
            }
            return model_list.ToArray();
        }

        public override M[] Select(int pageCount, int pageIndex, out int recordCount, WhereModel wheres = null, FieldOrderModel[] fieldOrders = null) {
            recordCount = 0;
            return new M[] { };
        }

        public override int GetRecordCount(WhereModel wheres) {
            try {
                string fileabspath = GetFileAbsPath();
                string rootNodeName = GetRootNodeName();
                string tablename = GetTableName();
                XmlDocument document = XmlHelper.GetDocument(fileabspath, rootNodeName);
                XmlNode root = document.SelectSingleNode(rootNodeName);
                if (CheckData.IsObjectNull(root)) {
                    return 0;
                }
                XmlNodeList list = root.SelectNodes(tablename);
                if (CheckData.IsSizeEmpty(list)) {
                    return 0;
                }
                return list.Count;
            } catch (Exception) {
                return 0;
            }
        }
        #endregion
    }
}
